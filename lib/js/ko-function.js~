ko.validation.configure({
    registerExtenders           : true,
    messagesOnModified          : true,
    errorsAsTitle               : true,                 // enables/disables showing of errors as title attribute of the target element.
    errorsAsTitleOnModified     : false,                // shows the error when hovering the input field (decorateElement must be true)
    messageTemplate             : null,
    insertMessages              : true,                 // automatically inserts validation messages as <span></span>
    parseInputAttributes        : false,                // parses the HTML5 validation attribute from a form element and adds that to the object
    writeInputAttributes        : false,                // adds HTML5 input validation attributes to form elements that ko observable's are bound to
    decorateInputElement        : false,                // false to keep backward compatibility
    decorateElementOnModified   : true,                 // true to keep backward compatibility
    errorClass                  : null,                 // single class for error message and element
    errorElementClass           : 'validationElement',  // class to decorate error element
    errorMessageClass           : 'validationMessage',  // class to decorate error message
    allowHtmlMessages           : false,                // allows HTML in validation messages
    grouping: {
        deep        : false,                            //by default grouping is shallow
        observable  : true,                             //and using observables
        live        : false                             //react to changes to observableArrays if observable === true
    }
});
var AJ = AJ || {};
AJ.utils = AJ.utils || {};
AJ.utils.slugify = function(str){
    var $slug = '';
    var trimmed = $.trim(str);
    $slug = trimmed.replace(/[^a-z0-9-]/gi, '-').
    replace(/-+/g, '-').
    replace(/^-|-$/g, '');
    return $slug.toLowerCase();
}

//Binding Handlers for Select2 (multiselect)
ko.bindingHandlers.select2 = {
    init: function (element, valueAccessor, allBindingsAccessor) {
        var obj = valueAccessor(),
            allBindings = allBindingsAccessor(),
            lookupKey = allBindings.lookupKey;
           
        $(element).select2(obj);
        if (lookupKey) {
            var value = ko.utils.unwrapObservable(allBindings.value);
            $(element).select2('data', ko.utils.arrayFirst(obj.data.results, function (item) {
                return item[lookupKey] === value;
            }));
        }
        if(allBindings.value){  // FIX no initial values   
            allBindings.value.subscribe(function (v) {
                $(element).trigger('change');
            });
        }
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            $(element).select2('destroy');
        });
    },
    update: function(element,valueAccessor,allBindingsAccessor) {
        
        //$(element).val(ko.utils.unwrapObservable(valueAccessor()));
        //$(element).trigger('change');
        
        var allBindings = allBindingsAccessor(),
            value = ko.utils.unwrapObservable(allBindings.value || allBindings.selectedOptions);
        if (value) {
            $(element).select2('val', value);
        }
    }
};

////Actions Defined in Variable Format
var actions = {
    hide: function(index, params, ConditionCheck,CallBackFalse, viewmodel)
    {
        if(typeof(params.Visibility)!="undefined" && ConditionCheck && CallBackFalse)
        {
            viewmodel.Fields()[index].Visibility(params.Visibility);
        }
        else if(typeof(params.Visibility)!="undefined")
        {
            viewmodel.Fields()[index].Visibility(!params.Visibility);
            //var reset = viewmodel.ResetField(index);
            if(typeof(viewmodel.Fields()[index].Events())!="undefined")
            {
                this.callBack = CallbackFormDataChange(viewmodel.Fields()[index], viewmodel);
            }
        }
    },
    show: function(index, params, ConditionCheck, CallBackFalse, viewmodel)
    {
        if(typeof(params.Visibility)!="undefined" && ConditionCheck && CallBackFalse)
        {
            viewmodel.Fields()[index].Visibility(params.Visibility);
        }
        else if(typeof(params.Visibility)!="undefined")
        {
            viewmodel.Fields()[index].Visibility(!params.Visibility);
            //var reset = viewmodel.ResetField(index);
            if(typeof(viewmodel.Fields()[index].Events())!="undefined")
            {
                //console.log("Calling Callback",index);
                this.callBack = CallbackFormDataChange(index, viewmodel);
            }
        }
    },
    enable : function(index, params, ConditionCheck, CallBackFalse, viewmodel)
    {
        if(typeof(params.Editable)!="undefined" && ConditionCheck && CallBackFalse)
        {
            viewmodel.Fields()[index].Editable(params.Editable);
        }
        else if(typeof(params.Editable)!="undefined")
        {
            viewmodel.Fields()[index].Value(!params.Editable);
            //var reset = viewmodel.ResetField(index);
            if(typeof(viewmodel.Fields()[index].Events())!="undefined")
            {
                this.callBack = CallbackFormDataChange(viewmodel.Fields()[index], viewmodel);
            }
        }
    },
    disable : function(index, params, ConditionCheck, CallBackFalse, viewmodel)
    {
        if(typeof(params.Editable)!="undefined" && ConditionCheck && CallBackFalse)
        {
            viewmodel.Fields()[index].Editable(params.Editable);
        }
        else if(typeof(params.Editable)!="undefined")
        {
            viewmodel.Fields()[index].Editable(!params.Editable);
            //var reset = viewmodel.ResetField(index);
            if(typeof(viewmodel.Fields()[index].Events())!="undefined")
            {
                this.callBack = CallbackFormDataChange(viewmodel.Fields()[index], viewmodel);
            }
        }
    },
    loadOption : function(index, params, ConditionCheck, CallBackFalse, viewmodel)
    {
        if(typeof(params.Options)!="undefined" && ConditionCheck && CallBackFalse)
        {
            viewmodel.Fields()[index].Options(params.Options);
        }
        else if(typeof(params.Options)!="undefined")
        {
            viewmodel.Fields()[index].Options(viewmodel.Fields()[index].iOptions);
            var reset = viewmodel.ResetField(index);
            if(typeof(viewmodel.Fields()[index].Events())!="undefined")
            {
                this.callBack = CallbackFormDataChange(viewmodel.Fields()[index], viewmodel);
            }
        }
    },
    valueChange : function(index, params, ConditionCheck, CallBackFalse, viewmodel)
    {
        if(typeof(params.Value)!="undefined" && ConditionCheck && CallBackFalse)
        {
            viewmodel.Fields()[index].Value(params.Value);
        }
    },
    addClass : function(index, params, ConditionCheck, CallBackFalse, viewmodel)
    {
        if(typeof(params.Class)!="undefined" && ConditionCheck && CallBackFalse)
        {
            viewmodel.Fields()[index].Class(params.Class);
        }
    }
};

// A compare function which is used to compare the current Value of the Form Field and the Value in params
function comparatorFunction(currentValue, params, viewmodel) {
    switch(params.comparator)
    {
        case "eq":
            return (params.val===currentValue);
        break;

        case "neq":
            return (params.val!=currentValue);
        break;

        case "lt":
            return (parseFloat(currentValue)<parseFloat(params.val));
        break;

        case "lte":
            return (parseFloat(currentValue)<=parseFloat(params.val));
        break;

        case "gt":
            return (parseFloat(currentValue)>parseFloat(params.val));
        break;

        case "gte":
            return (parseFloat(currentValue)>=parseFloat(params.val));
        break;

        default :
            return true;
        break;
    }
}

////CallBackOnFormChange
function CallbackFormDataChange(index,viewmodel) {
    console.log("I m here");
    if(typeof(viewmodel.Fields()[index].Events().Onchange)!="undefined")
    {
        viewmodel.OnFormDatachange(viewmodel.Fields()[index].Name(),viewmodel.Fields()[index].Events().Onchange,false);
    }
    if(typeof(viewmodel.Fields()[index].Events().Onblur)!="undefined")
    {
        viewmodel.OnFormDatachange(viewmodel.Fields()[index].Name(),viewmodel.Fields()[index].Events().Onblur,false);   
    }
    if(typeof(viewmodel.Fields()[index].Events().Onfocus)!="undefined")
    {
        viewmodel.OnFormDatachange(viewmodel.Fields()[index].Name(),viewmodel.Fields()[index].Events().Onfocus,false);
    }
    if(typeof(viewmodel.Fields()[index].Events().Oncheck)!="undefined")
    {
        viewmodel.OnFormDatachange(viewmodel.Fields()[index].Name(),viewmodel.Fields()[index].Events().Oncheck,false);
    }
    if(typeof(viewmodel.Fields()[index].Events().Onclick)!="undefined")
    {
        viewmodel.OnFormDatachange(viewmodel.Fields()[index].Name(),viewmodel.Fields()[index].Events().Onclick,false);
    }
}

////********* Function to create Fileds/Elements*********////
function FormField(data, viewmodel) {
    var self            =   this;
    self.Name           =   ko.observable(data.Name).extend({required:true}); //Name of the Field
    self.Element        =   ko.observable(data.Element+"-template").extend({required:true}); //Template Name
    self.idElm          =   ko.observable(data.idElm); //Id of the Element of this Field
    self.idDiv          =   ko.observable(data.idDiv); //Id of Div containing this Field
    self.Options        =   ko.observableArray([]); //Options if in the Field
    self.Placeholder    =   ko.observable(""); //Palceholder if in the Field
    self.Value          =   ko.observable("").extend(data.Validation); //Value of this Field
    self.Events         =   ko.observableArray([]); //Events to be called for this Field
    self.DivClass       =   ko.observable(""); //Class for the Div containing this Field
    self.ElementClass   =   ko.observable(""); //Class for the Element of this Field
    self.Editable       =   ko.observable(true); //Specifies Enability of this Field 
    self.Visibility     =   ko.observable(true); //Specifies Visibility of this Field 
    self.Duplicable     =   ko.observable(false); //Indicates if Field is Duplicable  
    self.selected2 = ko.observableArray([]); //Selected2 used for multiselect to get selected values

    //Each if specifies that if Attributes are defined in JSON formSchema then collect values from there

    if(typeof(data.Options)!="undefined"){ self.Options(data.Options); }

    if(typeof(data.Placeholder)!="undefined"){ self.Placeholder(data.Placeholder); }

    if(typeof(data.Value)!="undefined"){ self.Value(data.Value); }

    if(typeof(data.Events)!="undefined"){ self.Events(data.Events); }

    if(typeof(data.DivClass)!="undefined"){ self.DivClass(data.DivClass); }

    if(typeof(data.ElementClass)!="undefined"){ self.ElementClass(data.ElementClass); }

    if(typeof(data.Enable)!="undefined"){ self.Editable(data.Enable); }

    if(typeof(data.Visibility)!="undefined"){ self.Visibility(data.Visibility); }

    if(typeof(data.Duplicable)!="undefined"){ self.Duplicable(data.Duplicable); }
    
    if(typeof(data.selectedValues)!="undefined"){ self.selected2(data.selectedValues); }
}

////********* ViewModel Initialization*********////

function ViewModel(data) {
            
    var self = this;
    
    self.Fields = ko.observableArray([]); //Array of Fields with Attributes

    self.FieldsID = ko.observableArray([]); //Array of Fields ID corresponding to Fileds Maintaining Indexes

    //Creating Fields and FieldsID array//
    for(var key in data.fields) {
        self.FieldsID.push(key);
        self.Fields.push(new FormField(data.fields[key],self));
    }
    
    self.errors = ko.validation.group(this, {
        deep        : true,
        observable  : false
    });

    //SaveForm to check if errors don't submit else give the JSON output of Form Data
    self.SaveForm = function () {
        if(self.errors().length > 0) {
            self.errors.showAllMessages();
            console.log("errors");
            return;
        }
        console.log(ko.toJSON(self));
    };

    //Add Field OnClick event 
    self.DupField = function() {
        var index  = self.FieldsID().length -2;
        if(self.Fields()[index].Duplicable()===true) {
            var add = self.Fields.splice(index,0,new FormField(data.fields[self.FieldsID()[index]],self))
            var addName = self.FieldsID.splice(index,0,self.FieldsID()[index]+"1");
        }
    }

    //Reset Field value and Initializes gain with initial Values
    self.ResetField = function(index) {
        var removed = self.Fields.splice(index,1,new FormField(data.fields[self.FieldsID()[index]],self));
        return true;
    }

    //A function Which is being called Every time An Event Occurs on the Form
    self.OnFormDatachange = function(Element,Eventdata,CallBackTrue) {
        if(typeof(Eventdata)!="undefined")
        {
            var index = self.FieldsID().indexOf(Element);
            var currentVal = self.Fields()[index].Value();
            for(var i=0;i<Eventdata.length;i++)
            {
                console.log("hello",index, currentVal, Element, Eventdata[i],"i== ",i);
                var compareBool = comparatorFunction(currentVal,Eventdata[i],self); //Comparing CurrentValue to the Value On which event should occur Either True/False
                var actionToCall = Eventdata[i].funct; //For an Event Specifyiing the Action to be called
                var effIndex = self.FieldsID().indexOf(Eventdata[i].DepElement);//Retrieve index of the Element Which is affected by that event
                
                if(typeof(CallBackTrue)!="undefined")
                {
                    self.actioncall = actions[actionToCall](effIndex,Eventdata[i].params,compareBool,CallBackTrue,self); //Action Call
                    var reset = self.ResetField(index); //Reset Form Field
                }
                else
                    self.actioncall = actions[actionToCall](effIndex,Eventdata[i].params,compareBool,true,self); //Action Call
            }
        }
    }
};

////********* Calling Template File to get All Available Templates*********////
function dataLoad(JSONdata,tplSrc) {
    tplSrc = (!tplSrc)?"koFormGen/template/srcAll.html":tplSrc;
    $.get(tplSrc, function(template) {
        $("body").append(template);
        console.log(JSONdata);
        ko.applyBindings(new ViewModel(JSONdata));
        console.log("loading template");
    });
}
